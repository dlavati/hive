<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class IntString {
  static $_TSPEC;

  public $myint = null;
  public $myString = null;
  public $underscore_int = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'myint',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'myString',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'underscore_int',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['myint'])) {
        $this->myint = $vals['myint'];
      }
      if (isset($vals['myString'])) {
        $this->myString = $vals['myString'];
      }
      if (isset($vals['underscore_int'])) {
        $this->underscore_int = $vals['underscore_int'];
      }
    }
  }

  public function getName() {
    return 'IntString';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->myint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->myString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->underscore_int);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IntString');
    if ($this->myint !== null) {
      $xfer += $output->writeFieldBegin('myint', TType::I32, 1);
      $xfer += $output->writeI32($this->myint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myString !== null) {
      $xfer += $output->writeFieldBegin('myString', TType::STRING, 2);
      $xfer += $output->writeString($this->myString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->underscore_int !== null) {
      $xfer += $output->writeFieldBegin('underscore_int', TType::I32, 3);
      $xfer += $output->writeI32($this->underscore_int);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Complex {
  static $_TSPEC;

  public $aint = null;
  public $aString = null;
  public $lint = null;
  public $lString = null;
  public $lintString = null;
  public $mStringString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'aint',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'aString',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'lint',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'lString',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'lintString',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'IntString',
            ),
          ),
        6 => array(
          'var' => 'mStringString',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['aint'])) {
        $this->aint = $vals['aint'];
      }
      if (isset($vals['aString'])) {
        $this->aString = $vals['aString'];
      }
      if (isset($vals['lint'])) {
        $this->lint = $vals['lint'];
      }
      if (isset($vals['lString'])) {
        $this->lString = $vals['lString'];
      }
      if (isset($vals['lintString'])) {
        $this->lintString = $vals['lintString'];
      }
      if (isset($vals['mStringString'])) {
        $this->mStringString = $vals['mStringString'];
      }
    }
  }

  public function getName() {
    return 'Complex';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->aint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->lint = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->lint []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->lString = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->lString []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->lintString = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new IntString();
              $xfer += $elem17->read($input);
              $this->lintString []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->mStringString = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->mStringString[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Complex');
    if ($this->aint !== null) {
      $xfer += $output->writeFieldBegin('aint', TType::I32, 1);
      $xfer += $output->writeI32($this->aint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aString !== null) {
      $xfer += $output->writeFieldBegin('aString', TType::STRING, 2);
      $xfer += $output->writeString($this->aString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lint !== null) {
      if (!is_array($this->lint)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lint', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->lint));
        {
          foreach ($this->lint as $iter25)
          {
            $xfer += $output->writeI32($iter25);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lString !== null) {
      if (!is_array($this->lString)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lString', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->lString));
        {
          foreach ($this->lString as $iter26)
          {
            $xfer += $output->writeString($iter26);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lintString !== null) {
      if (!is_array($this->lintString)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lintString', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lintString));
        {
          foreach ($this->lintString as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mStringString !== null) {
      if (!is_array($this->mStringString)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mStringString', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->mStringString));
        {
          foreach ($this->mStringString as $kiter28 => $viter29)
          {
            $xfer += $output->writeString($kiter28);
            $xfer += $output->writeString($viter29);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
